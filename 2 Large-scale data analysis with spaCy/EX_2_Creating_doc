#####################################################################
Part 1
Import the Doc from spacy.tokens.
Create a Doc from the words and spaces. Don’t forget to pass in the vocab!
#####################################################################

from spacy.lang.en import English
​
nlp = English()
​
# Import the Doc class
from spacy.tokens import Doc
​
# Desired text: "spaCy is cool!"
words = ["spaCy", "is", "cool", "!"]
spaces = [True, True, False, False]
​
# Create a Doc from the words and spaces
doc = Doc(nlp.vocab, words=words, spaces=spaces)
print(doc.text)


#####################################################################
Part 2
Import the Doc from spacy.tokens.
Create a Doc from the words and spaces. Don’t forget to pass in the vocab!
#####################################################################

from spacy.lang.en import English

nlp = English()

# Import the Doc class
from spacy.tokens import Doc

# Desired text: "Go, get started!"
words = ["Go", ",", "get", "started", "!"]
spaces = [False, True, True, False, False]

# Create a Doc from the words and spaces
doc = Doc(nlp.vocab, words=words, spaces=spaces)
print(doc.text)


#####################################################################
Part 3
Import the Doc from spacy.tokens.
Complete the words and spaces to match the desired text and create a doc.
#####################################################################

from spacy.lang.en import English

nlp = English()

# Import the Doc class
from spacy.tokens import Doc

# Desired text: "Oh, really?!"
words = ["Oh", ",", "really", "?", "!"]
spaces = [False, True, False, False, False]

# Create a Doc from the words and spaces
doc = Doc(nlp.vocab, words=words, spaces=spaces)
print(doc.text)

#####################################################################
Import the Doc and Span classes from spacy.tokens.
Use the Doc class directly to create a doc from the words and spaces.
Create a Span for “David Bowie” from the doc and assign it the label "PERSON".
Overwrite the doc.ents with a list of one entity, the “David Bowie” span.

#####################################################################

from spacy.lang.en import English

nlp = English()

# Import the Doc and Span classes
from spacy.tokens import Doc, Span

words = ["I", "like", "David", "Bowie"]
spaces = [True, True, True, False]

# Create a doc from the words and spaces
doc = Doc(nlp.vocab,words=words, spaces=spaces)
print(doc.text)

# Create a span for "David Bowie" from the doc and assign it the label "PERSON"
span = Span(doc, 2, 4, label="PERSON")
print(span.text, span.label_)

# Add the span to the doc's entities
doc.ents = [span]

# Print entities' text and labels
print([(ent.text, ent.label_) for ent in doc.ents])


#####################################################################

PART 2
Loop over each token in the doc and check the token.pos_ attribute.
Use doc[token.i + 1] to check for the next token and its .pos_ attribute.
If a proper noun before a verb is found, print its token.text.


#####################################################################
import spacy

nlp = spacy.load("en_core_web_sm")
doc = nlp("Berlin is a nice city")

# Get all tokens and part-of-speech tags

for token in doc:
    # Check if the current token is a proper noun
    if token.pos_ == "PROPN":
        # Check if the next token is a verb
        #print(token.i)
        next_idx=token.i + 1
        #print(next_idx)
        if doc[next_idx].pos_ == "VERB":
            result = token.text
            print("Found proper noun before a verb:", result)

