####################################################################################
Import the Matcher from spacy.matcher.
Initialize it with the nlp object’s shared vocab.
Create a pattern that matches the "TEXT" values of two tokens: "iPhone" and "X".
Use the matcher.add method to add the pattern to the matcher.
Call the matcher on the doc and store the result in the variable matches.
Iterate over the matches and get the matched span from the start to the end index.
####################################################################################

import spacy

# Import the Matcher
from spacy.matcher import Matcher

nlp = spacy.load("en_core_web_sm")
doc = nlp("Upcoming iPhone X release date leaked as Apple reveals pre-orders")

# Initialize the Matcher with the shared vocabulary
matcher = Matcher(nlp.vocab)

# Create a pattern matching two tokens: "iPhone" and "X"
pattern = [{'text':'iPhone'},{'text':'X'}]

# Add the pattern to the matcher
matcher.add("IPHONE_X_PATTERN", None, pattern)

# Use the matcher on the doc
matches = matcher(doc)
print("Matches:", [doc[start:end].text for match_id, start, end in matches])


####################################################################################
WRITING MATCH PATTERNS
####################################################################################
part 1
Write one pattern that only matches mentions of the full iOS versions: “iOS 7”, “iOS 11” and “iOS 10”.
-----------------------------------------------------------------------------------------

pattern = [{"TEXT": "iOS"}, {"IS_DIGIT": True}]

####################################################################################

Part 2
Write one pattern that only matches forms of “download” (tokens with the lemma “download”), followed by a token with the part-of-speech tag "PROPN" (proper noun).
-----------------------------------------------------------------------------------------
pattern = [{"LEMMA": "download"}, {"POS": "PROPN"}]

####################################################################################

Part 3
Write one pattern that matches adjectives ("ADJ") followed by one or two "NOUN"s (one noun and one optional noun).
-----------------------------------------------------------------------------------------
pattern = [{"POS": "ADJ"}, {"POS": "NOUN"}, {"POS": "NOUN", "OP": "?"}]


####################################################################################